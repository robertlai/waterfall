// Generated by CoffeeScript 1.9.3
(function() {
  var FTP, Picture, api, db, express, fs, ftp, mongoose, pictureSchema;

  fs = require('fs');

  express = require('express');

  mongoose = require('mongoose');

  db = require('../Utilities/DB');

  FTP = require('ftp');

  api = express.Router();

  ftp = new FTP;

  ftp.connect({
    host: 'ftp.rcylai.ca',
    port: 21,
    user: 'waterfall@rcylai.ca',
    password: 'Waterfall0pw'
  });

  pictureSchema = new mongoose.Schema({
    fileName: String
  });

  Picture = mongoose.model('picture', pictureSchema);

  api.post('/api', function(req, res) {
    var fileName, fullFilePath;
    fileName = (new Date()).getTime();
    fullFilePath = __dirname + '/' + fileName + '.JPEG';
    return req.pipe(fs.createWriteStream(fullFilePath)).on('finish', function() {
      return ftp.put(fullFilePath, './data/images/' + fileName + '.JPEG', function(err) {
        var picture;
        fs.unlink(fullFilePath);
        if (err) {
          throw err;
          res.sendStatus(500);
          return;
        }
        picture = new Picture;
        picture.fileName = fileName;
        return picture.save(function(err, picture) {
          if (err) {
            throw err;
            res.sendStatus(500);
            return;
          }
          throw err;
        }).then(function() {
          return res.sendStatus(201);
        });
      });
    });
  });

  api.get('/api', function(req, res) {
    var currentLastFile;
    currentLastFile = req.query.currentLastFile;
    if (!currentLastFile) {
      currentLastFile = -1;
    }
    return Picture.find({}).sort('fileName').exec(function(err, pictures) {
      var i, len, picture;
      if (err) {
        throw err;
        res.sendStatus(500);
        return;
      }
      for (i = 0, len = pictures.length; i < len; i++) {
        picture = pictures[i];
        if (+picture.fileName > +currentLastFile) {
          ftp.get('./data/images/' + picture.fileName + '.JPEG', function(err, pictureFromFtp) {
            var filePath;
            if (err) {
              throw err;
              res.sendStatus(500);
              return;
            }
            filePath = __dirname + '/' + picture.fileName + '.JPEG';
            return pictureFromFtp.pipe(fs.createWriteStream(filePath)).on('finish', function() {
              res.set({
                'fileName': picture.fileName
              });
              return res.sendFile(filePath, function() {
                return fs.unlink(filePath);
              });
            });
          });
          return;
        }
      }
      return res.sendStatus(404);
    });
  });

  api["delete"]('/api/all', function(req, res) {
    return Picture.find({}).sort('fileName').exec(function(err, pictures) {
      var i, len, picture;
      if (err) {
        throw err;
        res.sendStatus(500);
        return;
      }
      for (i = 0, len = pictures.length; i < len; i++) {
        picture = pictures[i];
        ftp["delete"]('./data/images/' + picture.fileName + '.JPEG', function(err) {
          if (err) {
            throw err;
            res.sendStatus(500);
          }
        });
      }
      Picture.remove({}, function(err) {
        if (err) {
          throw err;
          res.sendStatus(500);
        }
      }).then(function() {
        return res.sendStatus(200);
      });
    });
  });

  api["delete"]('/api', function(req, res) {
    var fileName;
    fileName = req.query.fileName;
    if (!fileName) {
      res.sendStatus(500);
      return;
    }
    return ftp["delete"]('./data/images/' + fileName + '.JPEG', function(err) {
      if (err) {
        throw err;
        res.sendStatus(500);
        return;
      }
      Picture.remove({
        fileName: fileName
      }, function(err) {
        if (err) {
          throw err;
          res.sendStatus(500);
        }
      });
      return res.sendStatus(200);
    });
  });

  module.exports = api;

}).call(this);
