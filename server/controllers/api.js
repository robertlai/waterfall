// Generated by CoffeeScript 1.9.3
(function() {
  var FTP, Picture, api, db, express, ftp, mongoose, pictureSchema;

  express = require('express');

  mongoose = require('mongoose');

  db = require('../Utilities/DB');

  FTP = require('ftp');

  api = express.Router();

  ftp = new FTP;

  ftp.connect({
    host: 'ftp.rcylai.ca',
    port: 21,
    user: 'waterfall@rcylai.ca',
    password: 'Waterfall0pw'
  });

  pictureSchema = new mongoose.Schema({
    fileName: String
  });

  Picture = mongoose.model('picture', pictureSchema);

  api.post('/api', function(req, res) {
    var fileName;
    fileName = (new Date()).getTime();
    return ftp.put(req, './data/images/' + fileName + '.JPEG', function(err) {
      var picture;
      if (err) {
        console.log(err);
        return res.sendStatus(500);
      } else {
        picture = new Picture;
        picture.fileName = fileName;
        return picture.save(function(err, picture) {
          if (err) {
            console.log(err);
            return res.sendStatus(500);
          } else {
            return res.sendStatus(201);
          }
        });
      }
    });
  });

  api.get('/api', function(req, res) {
    var currentLastFile;
    currentLastFile = req.query.currentLastFile;
    if (!currentLastFile) {
      currentLastFile = -1;
    }
    return Picture.find({}).sort('fileName').exec(function(err, pictures) {
      var fileToGet, i, len, picture;
      if (err) {
        console.log(err);
        return res.sendStatus(500);
      } else {
        fileToGet = null;
        for (i = 0, len = pictures.length; i < len; i++) {
          picture = pictures[i];
          if (+picture.fileName > +currentLastFile) {
            fileToGet = picture.fileName;
            break;
          }
        }
        if (fileToGet) {
          return ftp.get('./data/images/' + picture.fileName + '.JPEG', function(err, pictureFromFtp) {
            if (err) {
              console.log(err);
              return res.sendStatus(500);
            } else {
              res.set({
                'Content-Type': 'image/jpeg'
              });
              res.set({
                'fileName': picture.fileName
              });
              return pictureFromFtp.pipe(res);
            }
          });
        } else {
          return res.sendStatus(404);
        }
      }
    });
  });

  api["delete"]('/api/all', function(req, res) {
    return Picture.find({}).sort('fileName').exec(function(err, pictures) {
      var i, len, picture;
      if (err) {
        console.log(err);
        return res.sendStatus(500);
      } else {
        for (i = 0, len = pictures.length; i < len; i++) {
          picture = pictures[i];
          ftp["delete"]('./data/images/' + picture.fileName + '.JPEG', function(err) {
            if (err) {
              console.log(err);
              return res.sendStatus(500);
            }
          });
        }
        return Picture.remove({}, function(err) {
          if (err) {
            console.log(err);
            return res.sendStatus(500);
          } else {
            return res.sendStatus(200);
          }
        });
      }
    });
  });

  api["delete"]('/api', function(req, res) {
    var fileName;
    fileName = req.query.fileName;
    if (!fileName) {
      res.sendStatus(500);
      return;
    }
    return ftp["delete"]('./data/images/' + fileName + '.JPEG', function(err) {
      if (err) {
        console.log(err);
        return res.sendStatus(500);
      } else {
        return Picture.remove({
          fileName: fileName
        }, function(err) {
          if (err) {
            console.log(err);
            return res.sendStatus(500);
          } else {
            return res.sendStatus(200);
          }
        });
      }
    });
  });

  module.exports = api;

}).call(this);
