// Generated by CoffeeScript 1.9.3
(function() {
  var Picture, api, db, express, fs, mongoose, pictureSchema;

  fs = require('fs');

  express = require('express');

  mongoose = require('mongoose');

  db = require('../Utilities/DB');

  api = express.Router();

  pictureSchema = new mongoose.Schema({
    file: Buffer,
    fileName: Number
  });

  Picture = mongoose.model('picture', pictureSchema);

  api.post('/api', function(req, res) {
    var fileName, fullFilePath;
    fileName = (new Date()).getTime();
    fullFilePath = __dirname + '/' + fileName + Math.floor(Math.random() * 20000);
    return req.pipe(fs.createWriteStream(fullFilePath)).on('finish', function() {
      var picture;
      picture = new Picture({
        fileName: fileName,
        file: fs.readFileSync(fullFilePath)
      });
      return picture.save(function(err, picture) {
        if (err) {
          res.sendStatus(500);
          throw err;
        } else {
          return res.sendStatus(201);
        }
      }).then(function() {
        return fs.unlinkSync(fullFilePath);
      });
    });
  });

  api.get('/api', function(req, res) {
    var lastFile;
    lastFile = req.query.lastFile ? req.query.lastFile : -1;
    return Picture.find({}).sort('fileName').exec(function(err, files) {
      var file, i, len;
      if (err) {
        res.sendStatus(500);
        throw err;
      } else {
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          if (file.fileName > lastFile) {
            res.set({
              'Content-Type': 'image/jpeg'
            });
            res.set({
              'fileName': file.fileName
            });
            res.send(file.file);
            return;
          }
        }
        return res.sendStatus(404);
      }
    });
  });

  api.get('/api/list', function(req, res) {
    return Picture.find({}).sort('fileName').exec(function(err, files) {
      var file, i, len, list;
      if (err) {
        res.sendStatus(500);
        throw err;
      } else {
        list = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          list.push(file.fileName);
        }
        return res.json(list);
      }
    });
  });

  api.get('/api/fileName', function(req, res) {
    return Picture.findOne({
      fileName: req.query.fileName
    }).exec(function(err, fileToSend) {
      if (err) {
        res.sendStatus(500);
        throw err;
      } else {
        res.set({
          'Content-Type': 'image/jpeg'
        });
        return res.send(fileToSend.file);
      }
    });
  });

  module.exports = api;

}).call(this);
